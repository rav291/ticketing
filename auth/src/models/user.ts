import mongoose from "mongoose";
import { Password } from "../services/password";

// We are creating these interfaces bcz some properties gets added (like _id, etc) after adding to DB.

// an interface that describes the properties that are required
// to create a user

interface UserAttrs {
  email: string;
  password: string;
}

// an interface that describes the functions
// that a user model has

interface UserModel extends mongoose.Model<UserDoc> {
  build(attrs: UserAttrs): UserDoc;
}

// an interface that describes the properties
// that a single user document has

interface UserDoc extends mongoose.Document {
  // id not given as a attribute, as it's generated by Document
  email: string;
  password: string;
}

const userSchema = new mongoose.Schema(
  {
    email: {
      type: String,
      required: true,
    },
    password: {
      type: String,
      required: true,
    },
  },
  {
    toJSON: {
      // We are refactoring fields which automatically gets added after doc creation
      transform(doc, ret) {
        ret.id = ret._id;
        delete ret._id;
        delete ret.password;
        delete ret.__v;
      },
    },
  }
);

userSchema.pre("save", async function (done) {
  if (this.isModified("password")) {
    const hashed = await Password.toHash(this.get("password"));
    this.set("password", hashed);
  }
  done();
});

userSchema.statics.build = (attrs: UserAttrs) => {
  // Making build as an intrinsic property of userSchema to create user
  return new User(attrs);
};

// const buildUser = (attrs: UserAttrs) => {
//   return new User(attrs);
// };

const User = mongoose.model<UserDoc, UserModel>("User", userSchema);
export { User };
